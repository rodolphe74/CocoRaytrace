* 6809 assembly program generated by cmoc 0.1.85


	SECTION	start


program_start	EXPORT
_main	IMPORT
INILIB	IMPORT
_exit	IMPORT
program_start	EQU	*
	LDD	#-1024		stack space in bytes
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention


	ENDSECTION




	SECTION	code


_isCoCo3	IMPORT
_textScreenWidth	IMPORT
_textScreenHeight	IMPORT
_palette	EXPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atanf	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_attr	IMPORT
_bsearch	IMPORT
_cls	IMPORT
_cmp	IMPORT
_cmpdww	IMPORT
_coldStart	IMPORT
_cosf	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_expf	IMPORT
_fabsf	IMPORT
_floorf	IMPORT
_ftoa	IMPORT
_getTextMode	IMPORT
_hscreen	IMPORT
_hset	IMPORT
_initCoCoSupport	IMPORT
_inkey	IMPORT
_isKeyPressed	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_locate	IMPORT
_logf	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_palette	IMPORT
_paletteRGB	IMPORT
_pcls	IMPORT
_pmode	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readDECBFile	IMPORT
_readJoystickButtons	IMPORT
_readJoystickPositions	IMPORT
_readline	IMPORT
_readword	IMPORT
_resetPalette	IMPORT
_rgb	IMPORT
_roundf	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_screen	IMPORT
_setBorderColor	IMPORT
_setCaseFlag	IMPORT
_setConsoleOutHook	IMPORT
_setHighSpeed	IMPORT
_setOutputDevice	IMPORT
_setPmodeGraphicsAddressEx	IMPORT
_setSAMRegisters	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_showGraphicsAddress	IMPORT
_showLowResTextAddress	IMPORT
_showPmode4	IMPORT
_sinf	IMPORT
_sleep	IMPORT
_sound	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_sqrtf	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tanf	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_truncf	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_waitkey	IMPORT
_width	IMPORT
_zerodw	IMPORT
_findNearestColor	EXPORT


*******************************************************************************

* FUNCTION findNearestColor(): defined at floattst.c:36
_findNearestColor	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-68,S
* Formal parameter(s):
*      4,U:   15 bytes: c: struct color_type
* Local non-static variable(s):
*    -68,U:    5 bytes: $V00126: float
*    -63,U:    5 bytes: $V00127: float
*    -58,U:    5 bytes: $V00128: float
*    -53,U:    5 bytes: $V00129: float
*    -48,U:    5 bytes: $V00130: float
*    -43,U:    5 bytes: $V00131: float
*    -38,U:    5 bytes: $V00132: float
*    -33,U:    5 bytes: $V00133: float
*    -28,U:    5 bytes: $V00134: float
*    -23,U:    5 bytes: $V00135: float
*    -18,U:    5 bytes: $V00136: float
*    -13,U:    1 byte : i: unsigned char
*    -12,U:    2 bytes: minIndex: int
*    -10,U:    5 bytes: minDistance: float
*     -5,U:    5 bytes: distance: float
* Line floattst.c:38: init of variable minIndex
	CLRA
	CLRB
	STD	-12,U		variable minIndex
* Line floattst.c:39: init of variable minDistance
	LEAX	F00142,PCR	real constant: 400000 (float)
	TFR	X,D		address of source number in D
	LEAX	-10,U		address of variable to init: minDistance
	LBSR	initSingleFromSingle
* Line floattst.c:40: init of variable distance
	CLRA
	CLRB
	LEAX	-5,U		address of variable distance
	LBSR	initSingleFromSignedWord
* Line floattst.c:41: for init
* Line floattst.c:41: init of variable i
	CLR	-13,U		variable i
	LBRA	L00144		jump to for condition
L00143	EQU	*
* Line floattst.c:41: for body
* Line floattst.c:46: assignment: =
* Push right operand of add.
* Push right operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	LEAX	10,X		member b of color_type
	PSHS	X
* Push left operand of sub.
	LEAX	14,U		member b of color_type, via variable c
	PSHS	X
	LEAX	-18,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	PSHS	X
* Push left operand of sub.
	LEAX	14,U		member b of color_type, via variable c
	PSHS	X
	LEAX	-23,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-28,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
* Push right operand of add.
* Push right operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	LEAX	5,X		member g of color_type
	PSHS	X
* Push left operand of sub.
	LEAX	9,U		member g of color_type, via variable c
	PSHS	X
	LEAX	-33,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	LEAX	5,X		member g of color_type
	PSHS	X
* Push left operand of sub.
	LEAX	9,U		member g of color_type, via variable c
	PSHS	X
	LEAX	-38,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-43,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
* Push right operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	PSHS	X
* Push left operand of sub.
	LEAX	4,U		member r of color_type, via variable c
	PSHS	X
	LEAX	-48,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of mul.
* Push right operand of sub.
	LDB	-13,U		variable i
* optim: stripOpToDeadReg
	LDA	#15		size of array element
	MUL			get offset in bytes in D
	LEAX	_palette+0,PCR	address of array palette
	LEAX	D,X		add offset
	PSHS	X
* Push left operand of sub.
	LEAX	4,U		member r of color_type, via variable c
	PSHS	X
	LEAX	-53,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-58,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-63,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-68,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-5,U		variable `distance', declared at floattst.c:40
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line floattst.c:47: if
* push right operand of comparison
	LEAX	-10,U		variable `minDistance', declared at floattst.c:39
	PSHS	X
* push left operand of comparison
	LEAX	-5,U		variable `distance', declared at floattst.c:40
	PSHS	X
	LBSR	cmpSingleSingle	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGE	L00148		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00147 removed
* Line floattst.c:47
* Line floattst.c:48: assignment: =
	LDB	-13,U		variable `i', declared at floattst.c:41
	CLRA
	LDB	-13,U
* optim: stripExtraClrA_B
	STD	-12,U
* Line floattst.c:49: assignment: =
	LEAX	-5,U		variable `distance', declared at floattst.c:40
	LDB	#5		optim: removeAndOrMulAddSub
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-10,U		variable `minDistance', declared at floattst.c:39
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
L00148	EQU	*		else clause of if() started at floattst.c:47
* Useless label L00149 removed
* Useless label L00145 removed
* Line floattst.c:41: for increment(s)
	INC	-13,U
L00144	EQU	*
* Line floattst.c:41: for condition
	LDB	-13,U		variable i
	CMPB	#$10
	LBLO	L00143
* optim: branchToNextLocation
* Useless label L00146 removed
* Line floattst.c:52: return with value
	LDD	-12,U		variable `minIndex', declared at floattst.c:38
* optim: branchToNextLocation
* Useless label L00120 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION findNearestColor(): defined at floattst.c:36
funcend_findNearestColor	EQU *
funcsize_findNearestColor	EQU	funcend_findNearestColor-_findNearestColor
_main	EXPORT


*******************************************************************************

* FUNCTION main(): defined at floattst.c:68
_main	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-55,S
* Local non-static variable(s):
*    -55,U:    5 bytes: a: float
*    -50,U:    5 bytes: b: float
*    -45,U:    5 bytes: c: float
*    -40,U:   15 bytes: co: struct color_type
*    -25,U:    5 bytes: $V00137: float
*    -20,U:    5 bytes: $V00138: float
*    -15,U:    5 bytes: $V00139: float
*    -10,U:    5 bytes: $V00140: float
*     -5,U:    5 bytes: $V00141: float
* Line floattst.c:70: init of variable a
	LEAX	F00150,PCR	real constant: 1.2 (float)
	TFR	X,D		address of source number in D
	LEAX	-55,U		address of variable to init: a
	LBSR	initSingleFromSingle
* Line floattst.c:71: init of variable b
	LEAX	F00151,PCR	real constant: 2.3 (float)
	TFR	X,D		address of source number in D
	LEAX	-50,U		address of variable to init: b
	LBSR	initSingleFromSingle
* Line floattst.c:72: init of variable c
* Push right operand of add.
	LEAX	-50,U		variable `b', declared at floattst.c:71
	PSHS	X
* Push left operand of add.
	LEAX	-55,U		variable `a', declared at floattst.c:70
	PSHS	X
	LEAX	-25,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-45,U		address of variable to init: c
	LBSR	initSingleFromSingle
* Line floattst.c:73: function call: printf()
	LEAX	-45,U		variable `c', declared at floattst.c:72
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 4 of printf(): float
	LEAX	-50,U		variable `b', declared at floattst.c:71
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 3 of printf(): float
	LEAX	-55,U		variable `a', declared at floattst.c:70
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 2 of printf(): float
	LEAX	S00122,PCR	"%f + %f = %f\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	17,S
* Line floattst.c:74: function call: printf()
* Line floattst.c:74: function call: sqrtf()
	LEAX	-45,U		variable `c', declared at floattst.c:72
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-20,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-20,U		address of struct/union returned by sqrtf()
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 3 of printf(): float
	LEAX	-45,U		variable `c', declared at floattst.c:72
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 2 of printf(): float
	LEAX	S00123,PCR	"sqrt(%f) = %f\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	12,S
* Line floattst.c:75: function call: printf()
* Line floattst.c:75: function call: expf()
* Push right operand of mul.
* Line floattst.c:75: function call: logf()
	LEAX	-45,U		variable `c', declared at floattst.c:72
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of logf(): float
	LEAX	-5,U		address of struct/union to be returned by logf()
	PSHS	X		hidden argument
	LBSR	_logf
	LEAS	7,S
	LEAX	-5,U		address of struct/union returned by logf()
	PSHS	X
* Push left operand of mul.
	LEAX	-55,U		variable `a', declared at floattst.c:70
	PSHS	X
	LEAX	-10,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of expf(): float
	LEAX	-15,U		address of struct/union to be returned by expf()
	PSHS	X		hidden argument
	LBSR	_expf
	LEAS	7,S
	LEAX	-15,U		address of struct/union returned by expf()
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 4 of printf(): float
	LEAX	-55,U		variable `a', declared at floattst.c:70
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 3 of printf(): float
	LEAX	-45,U		variable `c', declared at floattst.c:72
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 2 of printf(): float
	LEAX	S00124,PCR	"pow(%f,%f) = %f\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	17,S
* Line floattst.c:78: init of variable co
	CLRA
	LDB	#$FA		decimal 250 signed
	LEAX	-40,U		offset in variable co
	LBSR	initSingleFromSignedWord	preserves X
	CLRA
	LDB	#$FA		decimal 250 signed
	LEAX	-35,U		offset in variable co
	LBSR	initSingleFromSignedWord	preserves X
	CLRA
	LDB	#$FA		decimal 250 signed
	LEAX	-30,U		offset in variable co
	LBSR	initSingleFromSignedWord	preserves X
* Line floattst.c:79: function call: printf()
* Line floattst.c:79: function call: findNearestColor()
	LEAX	-40,U		variable `co', declared at floattst.c:78
	LDB	#15		size of struct color_type
	LEAS	-15,S		pass struct color_type by value
	LBSR	pushSmallStruct	argument 1 of findNearestColor(): struct color_type
	LBSR	_findNearestColor
	LEAS	15,S
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00125,PCR	"%d\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line floattst.c:80: return with value
	CLRA
	CLRB
* optim: branchToNextLocation
* Useless label L00121 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION main(): defined at floattst.c:68
funcend_main	EQU *
funcsize_main	EQU	funcend_main-_main


	ENDSECTION




	SECTION	initgl_start


INITGL	EXPORT
INITGL	EQU	*


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00122	EQU	*
	FCC	"%f + %f = %f"
	FCB	$0A
	FCB	0
S00123	EQU	*
	FCC	"sqrt(%f) = %f"
	FCB	$0A
	FCB	0
S00124	EQU	*
	FCC	"pow(%f,%f) = %f"
	FCB	$0A
	FCB	0
S00125	EQU	*
	FCC	"%d"
	FCB	$0A
	FCB	0
string_literals_end	EQU	*
real_constants_start	EQU	*


*******************************************************************************

* REAL CONSTANTS
F00142	EQU	*
	FCB	$93,$43,$50,$00,$00
F00150	EQU	*
	FCB	$81,$19,$99,$99,$99
F00151	EQU	*
	FCB	$82,$13,$33,$33,$33
real_constants_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
_palette	EQU	*		palette: struct color_type[]
* Element 0 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$82,$00,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$82,$00,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 1 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$82,$00,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$00,$00,$00,$00,$00
* Element 2 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$87,$14,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 3 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$87,$14,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$87,$14,$00,$00,$00
* Element 4 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$87,$14,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 5 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 6 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$87,$14,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 7 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 8 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$82,$00,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 9 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$6B,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$87,$14,$00,$00,$00
* Element 10 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 11 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$87,$14,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$87,$14,$00,$00,$00
* Element 12 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 13 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$82,$00,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 14 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$2C,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$82,$00,$00,$00,$00
* Element 15 of array, of type struct color_type
* Element 0 of compound initializer: member 'r' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 1 of compound initializer: member 'g' of type float
	FCB	$88,$7D,$00,$00,$00
* Element 2 of compound initializer: member 'b' of type float
	FCB	$88,$7D,$00,$00,$00
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




	SECTION	initgl_end


	RTS			end of global variable initialization


	ENDSECTION




*******************************************************************************



	SECTION	program_end


program_end	EXPORT
program_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 13 utility routine(s).
_expf	IMPORT
_logf	IMPORT
_memcpy	IMPORT
_printf	IMPORT
_sqrtf	IMPORT
addSingleSingle	IMPORT
cmpSingleSingle	IMPORT
initSingleFromSignedWord	IMPORT
initSingleFromSingle	IMPORT
mulSingleSingle	IMPORT
push5ByteStruct	IMPORT
pushSmallStruct	IMPORT
subSingleSingle	IMPORT


*******************************************************************************

	END
