* 6809 assembly program generated by cmoc 0.1.85


	SECTION	code


_isCoCo3	IMPORT
_textScreenWidth	IMPORT
_textScreenHeight	IMPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atanf	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_attr	IMPORT
_bsearch	IMPORT
_cls	IMPORT
_cmp	IMPORT
_cmpdww	IMPORT
_coldStart	IMPORT
_cosf	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_expf	IMPORT
_fabsf	IMPORT
_floorf	IMPORT
_ftoa	IMPORT
_getTextMode	IMPORT
_hscreen	IMPORT
_hset	IMPORT
_initCoCoSupport	IMPORT
_inkey	IMPORT
_isKeyPressed	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_locate	IMPORT
_logf	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_palette	IMPORT
_paletteRGB	IMPORT
_pcls	IMPORT
_plane_intersect	IMPORT
_pmode	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_ray	IMPORT
_readDECBFile	IMPORT
_readJoystickButtons	IMPORT
_readJoystickPositions	IMPORT
_readline	IMPORT
_readword	IMPORT
_resetPalette	IMPORT
_rgb	IMPORT
_roundf	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_screen	IMPORT
_setBorderColor	IMPORT
_setCaseFlag	IMPORT
_setConsoleOutHook	IMPORT
_setHighSpeed	IMPORT
_setOutputDevice	IMPORT
_setPmodeGraphicsAddressEx	IMPORT
_setSAMRegisters	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_showGraphicsAddress	IMPORT
_showLowResTextAddress	IMPORT
_showPmode4	IMPORT
_sinf	IMPORT
_sleep	IMPORT
_sound	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_sqrtf	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tanf	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_truncf	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vec_diff	IMPORT
_vec_dot	IMPORT
_vec_len	IMPORT
_vec_scale	IMPORT
_vec_sum	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_waitkey	IMPORT
_width	IMPORT
_zerodw	IMPORT
_intersect	EXPORT


*******************************************************************************

* FUNCTION intersect(): defined at sphere.c:70
_intersect	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-152,S
* Formal parameter(s):
*      4,U:    2 bytes: ray: struct ray_type *
*      6,U:    2 bytes: sph: struct sphere_type *
*      8,U:    2 bytes: t: float *
*     10,U:    2 bytes: x: int
*     12,U:    2 bytes: y: int
* Local non-static variable(s):
*   -152,U:    2 bytes: hit: int
*   -150,U:    5 bytes: A: float
*   -145,U:   15 bytes: dist: struct vector_type
*   -130,U:    5 bytes: B: float
*   -125,U:    5 bytes: C: float
*   -120,U:    5 bytes: discriminant: float
*   -115,U:    5 bytes: discsqrt: float
*   -110,U:    5 bytes: t0: float
*   -105,U:    5 bytes: t1: float
*   -100,U:    5 bytes: $V00129: float
*    -95,U:   15 bytes: $V00130: struct vector_type
*    -80,U:    5 bytes: $V00131: float
*    -75,U:    5 bytes: $V00132: float
*    -70,U:    5 bytes: $V00133: float
*    -65,U:    5 bytes: $V00134: float
*    -60,U:    5 bytes: $V00135: float
*    -55,U:    5 bytes: $V00136: float
*    -50,U:    5 bytes: $V00137: float
*    -45,U:    5 bytes: $V00138: float
*    -40,U:    5 bytes: $V00139: float
*    -35,U:    5 bytes: $V00140: float
*    -30,U:    5 bytes: $V00141: float
*    -25,U:    5 bytes: $V00142: float
*    -20,U:    5 bytes: $V00143: float
*    -15,U:    5 bytes: $V00144: float
*    -10,U:    5 bytes: $V00145: float
*     -5,U:    5 bytes: $V00146: float
* Line sphere.c:72: init of variable hit
	CLRA
	CLRB
	STD	-152,U		variable hit
* Line sphere.c:74: init of variable A
* Line sphere.c:74: function call: vec_dot()
	LDX	4,U		variable ray
	LEAX	15,X		member dir of ray_type
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LDX	4,U		variable ray
	LEAY	15,X		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-100,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-100,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-150,U		address of variable to init: A
	LBSR	initSingleFromSingle
* Line sphere.c:75: init of variable dist
* Line sphere.c:75: function call: vec_diff()
	LDX	6,U		variable sph
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LDY	4,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-95,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-95,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-145,U		destination struct: dist
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line sphere.c:76: init of variable B
* Push right operand of mul.
* Line sphere.c:76: function call: vec_dot()
	LEAX	-145,U		variable `dist', declared at sphere.c:75
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LDX	4,U		variable ray
	LEAY	15,X		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-75,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-75,U		address of struct/union returned by vec_dot()
	PSHS	X
* Push left operand of mul.
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A
	LEAX	-80,U		temporary destination, type float
	LBSR	mulIntSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-130,U		address of variable to init: B
	LBSR	initSingleFromSingle
* Line sphere.c:77: init of variable C
* Push right operand of sub.
* Push right operand of mul.
	LDX	6,U		variable sph
	LEAX	15,X		member radius of sphere_type
	PSHS	X
* Push left operand of mul.
	LDX	6,U		variable sph
	LEAX	15,X		member radius of sphere_type
	PSHS	X
	LEAX	-60,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of sub.
* Line sphere.c:77: function call: vec_dot()
	LEAX	-145,U		variable `dist', declared at sphere.c:75
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-145,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-65,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-65,U		address of struct/union returned by vec_dot()
	PSHS	X
	LEAX	-70,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-125,U		address of variable to init: C
	LBSR	initSingleFromSingle
* Line sphere.c:80: init of variable discriminant
* Push right operand of sub.
* Push right operand of mul.
* Push right operand of mul.
	LEAX	-125,U		variable `C', declared at sphere.c:77
	PSHS	X
* Push left operand of mul.
	LEAX	-150,U		variable `A', declared at sphere.c:74
	PSHS	X
	LEAX	-40,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of mul.
	LEAX	F00147,PCR	real constant: 4 (float)
	PSHS	X
	LEAX	-45,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of sub.
* Push right operand of mul.
	LEAX	-130,U		variable `B', declared at sphere.c:76
	PSHS	X
* Push left operand of mul.
	LEAX	-130,U		variable `B', declared at sphere.c:76
	PSHS	X
	LEAX	-50,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-55,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-120,U		address of variable to init: discriminant
	LBSR	initSingleFromSingle
* Line sphere.c:85: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-120,U		variable `discriminant', declared at sphere.c:80
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGE	L00149		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00148 removed
* Line sphere.c:85
* Line sphere.c:86: assignment: =
	CLRA
	CLRB
	STD	-152,U
* Line sphere.c:87: return with value
* optim: storeLoad
	LBRA	L00128		return (sphere.c:87)
L00149	EQU	*		else clause of if() started at sphere.c:85
* Useless label L00150 removed
* Line sphere.c:91: init of variable discsqrt
* Line sphere.c:91: function call: sqrtf()
	LEAX	-120,U		variable `discriminant', declared at sphere.c:80
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-35,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-35,U		address of struct/union returned by sqrtf()
	TFR	X,D		address of source number in D
	LEAX	-115,U		address of variable to init: discsqrt
	LBSR	initSingleFromSingle
* Line sphere.c:92: init of variable t0
* Push right operand of div.
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A
* Push left operand of div.
* Push right operand of sub.
	LEAX	-115,U		variable `discsqrt', declared at sphere.c:91
	PSHS	X
* Push left operand of sub.
	LEAX	-130,U		variable `B', declared at sphere.c:76
	TFR	X,D		operand
	LEAX	-20,U		address of result of operator
	LBSR	copySingle	preserves X
	LBSR	negateSingle	preserves X
	PSHS	X
	LEAX	-25,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-30,U		temporary destination, type float
	LBSR	divSingleInt	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-110,U		address of variable to init: t0
	LBSR	initSingleFromSingle
* Line sphere.c:93: init of variable t1
* Push right operand of div.
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A
* Push left operand of div.
* Push right operand of add.
	LEAX	-115,U		variable `discsqrt', declared at sphere.c:91
	PSHS	X
* Push left operand of add.
	LEAX	-130,U		variable `B', declared at sphere.c:76
	TFR	X,D		operand
	LEAX	-5,U		address of result of operator
	LBSR	copySingle	preserves X
	LBSR	negateSingle	preserves X
	PSHS	X
	LEAX	-10,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-15,U		temporary destination, type float
	LBSR	divSingleInt	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-105,U		address of variable to init: t1
	LBSR	initSingleFromSingle
* Line sphere.c:97: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-110,U		variable `t0', declared at sphere.c:92
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGE	L00152		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00153 removed
	LEAX	-105,U		variable `t1', declared at sphere.c:93
	LBSR	isSingleZero
	BNE	L00152		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00151 removed
* Line sphere.c:97
* Line sphere.c:98: assignment: =
	CLRA
	CLRB
	STD	-152,U
L00152	EQU	*		else clause of if() started at sphere.c:97
* Useless label L00154 removed
* Line sphere.c:100: if
* push right operand of comparison
	LEAX	F00157,PCR	real constant: 0 (float)
	PSHS	X
* push left operand of comparison
	LEAX	-110,U		variable `t0', declared at sphere.c:92
	PSHS	X
	LBSR	cmpSingleSingle	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGE	L00156		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00155 removed
* Line sphere.c:100
* Line sphere.c:101: assignment: =
	LEAX	-105,U		variable `t1', declared at sphere.c:93
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LDX	8,U		get address for indirection of variable t
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
L00156	EQU	*		else clause of if() started at sphere.c:100
* Useless label L00158 removed
* Line sphere.c:105: if
* push right operand of comparison
	LEAX	F00157,PCR	real constant: 0 (float)
	PSHS	X
* push left operand of comparison
	LEAX	-110,U		variable `t0', declared at sphere.c:92
	PSHS	X
	LBSR	cmpSingleSingle	sets N, Z, V, C; preserves X
	LEAS	4,S
	BLE	L00160		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00159 removed
* Line sphere.c:105
* Line sphere.c:106: assignment: =
	LEAX	-110,U		variable `t0', declared at sphere.c:92
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LDX	8,U		get address for indirection of variable t
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line sphere.c:107: assignment: =
	CLRA
	LDB	#$01		decimal 1 signed
	STD	-152,U
	BRA	L00161		jump over else clause
L00160	EQU	*		else clause of if() started at sphere.c:105
* Line sphere.c:109
* Line sphere.c:109: assignment: =
	CLRA
	CLRB
	STD	-152,U
L00161	EQU	*		end of if() started at sphere.c:105
* Line sphere.c:112: return with value
	LDD	-152,U		variable `hit', declared at sphere.c:72
* optim: branchToNextLocation
L00128	EQU	*		end of intersect()
	LEAS	,U
	PULS	U,PC
* END FUNCTION intersect(): defined at sphere.c:70
funcend_intersect	EQU *
funcsize_intersect	EQU	funcend_intersect-_intersect


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*
real_constants_start	EQU	*


*******************************************************************************

* REAL CONSTANTS
F00147	EQU	*
	FCB	$83,$00,$00,$00,$00
F00157	EQU	*
	FCB	$00,$00,$00,$00,$00
real_constants_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 17 utility routine(s).
_memcpy	IMPORT
_sqrtf	IMPORT
_vec_diff	IMPORT
_vec_dot	IMPORT
addSingleSingle	IMPORT
cmpSingleSignedInt	IMPORT
cmpSingleSingle	IMPORT
copyMem	IMPORT
copySingle	IMPORT
divSingleInt	IMPORT
initSingleFromSingle	IMPORT
isSingleZero	IMPORT
mulIntSingle	IMPORT
mulSingleSingle	IMPORT
negateSingle	IMPORT
push5ByteStruct	IMPORT
subSingleSingle	IMPORT


*******************************************************************************

	END
