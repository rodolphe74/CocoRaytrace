* 6809 assembly program generated by cmoc 0.1.85


	SECTION	code


_isCoCo3	IMPORT
_textScreenWidth	IMPORT
_textScreenHeight	IMPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atanf	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_attr	IMPORT
_bsearch	IMPORT
_cls	IMPORT
_cmp	IMPORT
_cmpdww	IMPORT
_coldStart	IMPORT
_cosf	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_expf	IMPORT
_fabsf	IMPORT
_floorf	IMPORT
_ftoa	IMPORT
_getTextMode	IMPORT
_hscreen	IMPORT
_hset	IMPORT
_initCoCoSupport	IMPORT
_inkey	IMPORT
_intersect	IMPORT
_isKeyPressed	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_locate	IMPORT
_logf	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_palette	IMPORT
_paletteRGB	IMPORT
_pcls	IMPORT
_plane_intersect	IMPORT
_pmode	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_ray	IMPORT
_readDECBFile	IMPORT
_readJoystickButtons	IMPORT
_readJoystickPositions	IMPORT
_readline	IMPORT
_readword	IMPORT
_resetPalette	IMPORT
_rgb	IMPORT
_roundf	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_screen	IMPORT
_setBorderColor	IMPORT
_setCaseFlag	IMPORT
_setConsoleOutHook	IMPORT
_setHighSpeed	IMPORT
_setOutputDevice	IMPORT
_setPmodeGraphicsAddressEx	IMPORT
_setSAMRegisters	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_showGraphicsAddress	IMPORT
_showLowResTextAddress	IMPORT
_showPmode4	IMPORT
_sinf	IMPORT
_sleep	IMPORT
_sound	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_sqrtf	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tanf	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_truncf	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vec_diff	IMPORT
_vec_dot	IMPORT
_vec_len	IMPORT
_vec_scale	IMPORT
_vec_sum	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_waitkey	IMPORT
_width	IMPORT
_zerodw	IMPORT
_pln_lighting	EXPORT


*******************************************************************************

* FUNCTION pln_lighting(): defined at light.c:16
_pln_lighting	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-260,S
* Formal parameter(s):
*      6,U:    2 bytes: light: struct light_type *
*      8,U:    2 bytes: ray: struct ray_type *
*     10,U:    2 bytes: plnx: struct intersect *
* Local non-static variable(s):
*   -260,U:    5 bytes: T: float
*   -255,U:   15 bytes: RGB: struct color_type
*   -240,U:    5 bytes: amb: float
*   -235,U:   15 bytes: V: struct vector_type
*   -220,U:   15 bytes: normv: struct vector_type
*   -205,U:   15 bytes: normorg: struct vector_type
*   -190,U:   15 bytes: N: struct vector_type
*   -175,U:    5 bytes: tp: float
*   -170,U:    5 bytes: tmp: float
*   -165,U:   15 bytes: d: struct vector_type
*   -150,U:    5 bytes: dL: float
*   -145,U:    5 bytes: c1: float
*   -140,U:    5 bytes: c2: float
*   -135,U:    5 bytes: c3: float
*   -130,U:    5 bytes: atten: float
*   -125,U:   15 bytes: $V00132: struct vector_type
*   -110,U:   15 bytes: $V00133: struct vector_type
*    -95,U:   15 bytes: $V00134: struct vector_type
*    -80,U:    5 bytes: $V00135: float
*    -75,U:    5 bytes: $V00136: float
*    -70,U:    5 bytes: $V00137: float
*    -65,U:   15 bytes: $V00138: struct vector_type
*    -50,U:   15 bytes: $V00139: struct vector_type
*    -35,U:    5 bytes: $V00140: float
*    -30,U:    5 bytes: $V00141: float
*    -25,U:    5 bytes: $V00142: float
*    -20,U:    5 bytes: $V00143: float
*    -15,U:    5 bytes: $V00144: float
*    -10,U:    5 bytes: $V00145: float
*     -5,U:    5 bytes: $V00146: float
* Line light.c:18: init of variable T
	LDX	10,U		variable plnx
	LEAX	15,X		member plnT of intersect
	TFR	X,D		address of source number in D
	LEAX	-260,U		address of variable to init: T
	LBSR	initSingleFromSingle
* Line light.c:20: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-255,U		member r of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:21: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-250,U		member g of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:22: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-245,U		member b of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:25: init of variable amb
	LEAX	F00187,PCR	real constant: 0.1 (float)
	TFR	X,D		address of source number in D
	LEAX	-240,U		address of variable to init: amb
	LBSR	initSingleFromSingle
* Line light.c:26: assignment: +=
* Push right operand of add.
	LEAX	-240,U		variable `amb', declared at light.c:25
	PSHS	X
* Push left operand of add.
	LEAX	-255,U		member r of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:27: assignment: +=
* Push right operand of add.
	LEAX	-240,U		variable `amb', declared at light.c:25
	PSHS	X
* Push left operand of add.
	LEAX	-250,U		member g of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:28: assignment: +=
* Push right operand of add.
	LEAX	-240,U		variable `amb', declared at light.c:25
	PSHS	X
* Push left operand of add.
	LEAX	-245,U		member b of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:31: init of variable V
	LDX	8,U		variable ray
	LEAX	15,X		member dir of ray_type
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-235,U		destination struct: V
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:34: init of variable normv
* Line light.c:34: function call: vec_scale()
	LEAX	-235,U		variable `V', declared at light.c:31
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-260,U		variable `T', declared at light.c:18
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-125,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-125,U		address of struct/union returned by vec_scale()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-220,U		destination struct: normv
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:35: init of variable normorg
* Line light.c:35: function call: vec_sum()
	LEAX	-220,U		variable `normv', declared at light.c:34
	PSHS	X		argument 2 of vec_sum(): struct vector_type *
	LDY	8,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-110,U		address of struct/union to be returned by vec_sum()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_sum
	LEAS	6,S
	LEAX	-110,U		address of struct/union returned by vec_sum()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-205,U		destination struct: normorg
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:39: init of variable N
* Line light.c:39: function call: vec_diff()
	LDX	10,U		variable plnx
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LEAY	-205,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-95,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-95,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-190,U		destination struct: N
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:42: init of variable tp
* Line light.c:42: function call: vec_dot()
	LEAX	-190,U		variable `N', declared at light.c:39
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-190,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-80,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-80,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-175,U		address of variable to init: tp
	LBSR	initSingleFromSingle
* Line light.c:43: init of variable tmp
* Push right operand of div.
* Line light.c:43: function call: sqrtf()
	LEAX	-175,U		variable `tp', declared at light.c:42
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-70,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-70,U		address of struct/union returned by sqrtf()
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-75,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-170,U		address of variable to init: tmp
	LBSR	initSingleFromSingle
* Line light.c:44: assignment: =
* Line light.c:44: function call: vec_scale()
	LEAX	-190,U		variable `N', declared at light.c:39
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-170,U		variable `tmp', declared at light.c:43
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-65,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-65,U		address of struct/union returned by vec_scale()
	LDD	#15		size of struct vector_type
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-190,U		variable `N', declared at light.c:39
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line light.c:47: init of variable d
* Line light.c:47: function call: vec_diff()
	LEAX	-205,U		variable `normorg', declared at light.c:35
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LDY	6,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-50,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-50,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-165,U		destination struct: d
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:50: init of variable dL
* Line light.c:50: function call: vec_len()
	LEAY	-165,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-35,U		address of struct/union to be returned by vec_len()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_len
	LEAS	4,S
	LEAX	-35,U		address of struct/union returned by vec_len()
	TFR	X,D		address of source number in D
	LEAX	-150,U		address of variable to init: dL
	LBSR	initSingleFromSingle
* Line light.c:53: init of variable c1
	LEAX	F00189,PCR	real constant: 0.002 (float)
	TFR	X,D		address of source number in D
	LEAX	-145,U		address of variable to init: c1
	LBSR	initSingleFromSingle
* Line light.c:54: init of variable c2
	LEAX	F00190,PCR	real constant: 0.02 (float)
	TFR	X,D		address of source number in D
	LEAX	-140,U		address of variable to init: c2
	LBSR	initSingleFromSingle
* Line light.c:55: init of variable c3
	LEAX	F00191,PCR	real constant: 0.2 (float)
	TFR	X,D		address of source number in D
	LEAX	-135,U		address of variable to init: c3
	LBSR	initSingleFromSingle
* Line light.c:58: init of variable atten
* Push right operand of div.
* Push right operand of add.
	LEAX	-135,U		variable `c3', declared at light.c:55
	PSHS	X
* Push left operand of add.
* Push right operand of add.
* Push right operand of mul.
	LEAX	-150,U		variable `dL', declared at light.c:50
	PSHS	X
* Push left operand of mul.
	LEAX	-140,U		variable `c2', declared at light.c:54
	PSHS	X
	LEAX	-5,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
* Push right operand of mul.
* Push right operand of mul.
	LEAX	-150,U		variable `dL', declared at light.c:50
	PSHS	X
* Push left operand of mul.
	LEAX	-150,U		variable `dL', declared at light.c:50
	PSHS	X
	LEAX	-10,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of mul.
	LEAX	-145,U		variable `c1', declared at light.c:53
	PSHS	X
	LEAX	-15,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-20,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-25,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-30,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-130,U		address of variable to init: atten
	LBSR	initSingleFromSingle
* Line light.c:59: if
* push right operand of comparison
	LEAX	F00187,PCR	real constant: 0.1 (float)
	PSHS	X
* push left operand of comparison
	LEAX	-130,U		variable `atten', declared at light.c:58
	PSHS	X
	LBSR	cmpSingleSingle	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGE	L00193		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00192 removed
* Line light.c:59
* Line light.c:60: assignment: =
	LEAX	F00187,PCR	real constant: 0.1 (float)
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-130,U		variable `atten', declared at light.c:58
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
L00193	EQU	*		else clause of if() started at light.c:59
* Useless label L00194 removed
* Line light.c:62: assignment: +=
* Push right operand of add.
	LEAX	-130,U		variable `atten', declared at light.c:58
	PSHS	X
* Push left operand of add.
	LEAX	-255,U		member r of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:63: assignment: +=
* Push right operand of add.
	LEAX	-130,U		variable `atten', declared at light.c:58
	PSHS	X
* Push left operand of add.
	LEAX	-250,U		member g of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:64: assignment: +=
* Push right operand of add.
	LEAX	-130,U		variable `atten', declared at light.c:58
	PSHS	X
* Push left operand of add.
	LEAX	-245,U		member b of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:68: return struct/union by value
	LEAX	-255,U		variable `RGB', declared at light.c:19
	PSHS	X		source struct/union
	LDX	4,U		address of return value
	LDD	#15		size of struct color_type
	LBSR	copyMem
	LEAS	2,S		discard copyMem argument
* optim: branchToNextLocation
* Useless label L00130 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION pln_lighting(): defined at light.c:16
funcend_pln_lighting	EQU *
funcsize_pln_lighting	EQU	funcend_pln_lighting-_pln_lighting
_do_lighting	EXPORT


*******************************************************************************

* FUNCTION do_lighting(): defined at light.c:73
_do_lighting	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-455,S
* Formal parameter(s):
*      6,U:    2 bytes: light: struct light_type *
*      8,U:    2 bytes: ray: struct ray_type *
*     10,U:    2 bytes: sph: struct sphere_type *
*     12,U:    2 bytes: t: float *
* Local non-static variable(s):
*   -455,U:    5 bytes: $V00178: float
*   -450,U:    5 bytes: $V00179: float
*   -445,U:    5 bytes: $V00180: float
*   -440,U:    5 bytes: $V00181: float
*   -435,U:    5 bytes: $V00182: float
*   -430,U:    5 bytes: $V00183: float
*   -425,U:    5 bytes: $V00184: float
*   -420,U:    5 bytes: $V00185: float
*   -415,U:    5 bytes: $V00186: float
*   -410,U:    5 bytes: T: float
*   -405,U:   15 bytes: RGB: struct color_type
*   -390,U:    5 bytes: amb: float
*   -385,U:   15 bytes: V: struct vector_type
*   -370,U:    5 bytes: tpr: float
*   -365,U:    5 bytes: tmpr: float
*   -360,U:   15 bytes: normv: struct vector_type
*   -345,U:   15 bytes: normorg: struct vector_type
*   -330,U:   15 bytes: N: struct vector_type
*   -315,U:    5 bytes: tp: float
*   -310,U:    5 bytes: tmp: float
*   -305,U:   15 bytes: litlen: struct vector_type
*   -290,U:   15 bytes: L: struct vector_type
*   -275,U:    5 bytes: cos_theta: float
*   -270,U:   15 bytes: tempr: struct vector_type
*   -255,U:   15 bytes: R: struct vector_type
*   -240,U:    5 bytes: tmp2: float
*   -235,U:    5 bytes: cos_alpha: float
*   -230,U:    5 bytes: n: float
*   -225,U:    5 bytes: $V00147: float
*   -220,U:    5 bytes: $V00148: float
*   -215,U:    5 bytes: $V00149: float
*   -210,U:   15 bytes: $V00150: struct vector_type
*   -195,U:   15 bytes: $V00151: struct vector_type
*   -180,U:   15 bytes: $V00152: struct vector_type
*   -165,U:   15 bytes: $V00153: struct vector_type
*   -150,U:    5 bytes: $V00154: float
*   -145,U:    5 bytes: $V00155: float
*   -140,U:    5 bytes: $V00156: float
*   -135,U:   15 bytes: $V00157: struct vector_type
*   -120,U:   15 bytes: $V00158: struct vector_type
*   -105,U:   15 bytes: $V00159: struct vector_type
*    -90,U:    5 bytes: $V00160: float
*    -85,U:    5 bytes: $V00161: float
*    -80,U:   15 bytes: $V00168: struct vector_type
*    -65,U:    5 bytes: $V00169: float
*    -60,U:    5 bytes: $V00170: float
*    -55,U:   15 bytes: $V00171: struct vector_type
*    -40,U:    5 bytes: $V00172: float
*    -35,U:    5 bytes: $V00173: float
*    -30,U:    5 bytes: $V00174: float
*    -25,U:   15 bytes: $V00175: struct vector_type
*    -10,U:    5 bytes: $V00176: float
*     -5,U:    5 bytes: $V00177: float
* Line light.c:75: init of variable T
	LDX	12,U		get address for indirection of variable t
	TFR	X,D		address of source number in D
	LEAX	-410,U		address of variable to init: T
	LBSR	initSingleFromSingle
* Line light.c:77: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-405,U		member r of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:78: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-400,U		member g of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:79: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
	LEAX	-395,U		member b of color_type, via variable RGB
* optim: stripUselessPushPull
	LBSR	initSingleFromSignedWord
* Line light.c:82: init of variable amb
	LEAX	F00187,PCR	real constant: 0.1 (float)
	TFR	X,D		address of source number in D
	LEAX	-390,U		address of variable to init: amb
	LBSR	initSingleFromSingle
* Line light.c:83: assignment: +=
* Push right operand of add.
	LEAX	-390,U		variable `amb', declared at light.c:82
	PSHS	X
* Push left operand of add.
	LEAX	-405,U		member r of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:84: assignment: +=
* Push right operand of add.
	LEAX	-390,U		variable `amb', declared at light.c:82
	PSHS	X
* Push left operand of add.
	LEAX	-400,U		member g of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:85: assignment: +=
* Push right operand of add.
	LEAX	-390,U		variable `amb', declared at light.c:82
	PSHS	X
* Push left operand of add.
	LEAX	-395,U		member b of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:88: init of variable V
	LDX	8,U		variable ray
	LEAX	15,X		member dir of ray_type
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-385,U		destination struct: V
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:91: init of variable tpr
* Line light.c:91: function call: vec_dot()
	LEAX	-385,U		variable `V', declared at light.c:88
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-385,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-225,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-225,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-370,U		address of variable to init: tpr
	LBSR	initSingleFromSingle
* Line light.c:92: init of variable tmpr
* Push right operand of div.
* Line light.c:92: function call: sqrtf()
	LEAX	-370,U		variable `tpr', declared at light.c:91
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-215,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-215,U		address of struct/union returned by sqrtf()
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-220,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-365,U		address of variable to init: tmpr
	LBSR	initSingleFromSingle
* Line light.c:93: assignment: =
* Line light.c:93: function call: vec_scale()
	LEAX	-385,U		variable `V', declared at light.c:88
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-365,U		variable `tmpr', declared at light.c:92
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-210,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-210,U		address of struct/union returned by vec_scale()
	LDD	#15		size of struct vector_type
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-385,U		variable `V', declared at light.c:88
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line light.c:96: init of variable normv
* Line light.c:96: function call: vec_scale()
	LEAX	-385,U		variable `V', declared at light.c:88
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-410,U		variable `T', declared at light.c:75
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-195,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-195,U		address of struct/union returned by vec_scale()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-360,U		destination struct: normv
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:97: init of variable normorg
* Line light.c:97: function call: vec_sum()
	LEAX	-360,U		variable `normv', declared at light.c:96
	PSHS	X		argument 2 of vec_sum(): struct vector_type *
	LDY	8,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-180,U		address of struct/union to be returned by vec_sum()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_sum
	LEAS	6,S
	LEAX	-180,U		address of struct/union returned by vec_sum()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-345,U		destination struct: normorg
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:101: init of variable N
* Line light.c:101: function call: vec_diff()
	LDX	10,U		variable sph
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LEAY	-345,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-165,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-165,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-330,U		destination struct: N
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:104: init of variable tp
* Line light.c:104: function call: vec_dot()
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-330,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-150,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-150,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-315,U		address of variable to init: tp
	LBSR	initSingleFromSingle
* Line light.c:105: init of variable tmp
* Push right operand of div.
* Line light.c:105: function call: sqrtf()
	LEAX	-315,U		variable `tp', declared at light.c:104
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-140,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-140,U		address of struct/union returned by sqrtf()
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-145,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-310,U		address of variable to init: tmp
	LBSR	initSingleFromSingle
* Line light.c:106: assignment: =
* Line light.c:106: function call: vec_scale()
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-310,U		variable `tmp', declared at light.c:105
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-135,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-135,U		address of struct/union returned by vec_scale()
	LDD	#15		size of struct vector_type
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line light.c:109: init of variable litlen
* Line light.c:109: function call: vec_diff()
	LEAX	-345,U		variable `normorg', declared at light.c:97
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LDY	6,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-120,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-120,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-305,U		destination struct: litlen
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:110: init of variable L
* Line light.c:110: function call: vec_scale()
	LEAX	-305,U		variable `litlen', declared at light.c:109
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
* Push right operand of div.
	LEAX	-410,U		variable `T', declared at light.c:75
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-90,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-105,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-105,U		address of struct/union returned by vec_scale()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-290,U		destination struct: L
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:115: init of variable cos_theta
* Line light.c:115: function call: vec_dot()
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-290,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-85,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-85,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-275,U		address of variable to init: cos_theta
	LBSR	initSingleFromSingle
* Line light.c:116: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-275,U		variable `cos_theta', declared at light.c:115
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	LBLE	L00196		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00195 removed
* Line light.c:116
* Line light.c:117: assignment: +=
* Push right operand of add.
* Push right operand of mul.
	LDX	10,U		variable sph
	LEAX	20,X		member sclr of sphere_type
	PSHS	X
* Push left operand of mul.
* Push right operand of mul.
	LDX	6,U		variable light
	LEAX	15,X		member amount of light_type
	PSHS	X
* Push left operand of mul.
	LEAX	-275,U		variable `cos_theta', declared at light.c:115
	PSHS	X
	LEAX	-435,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-440,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LEAX	-405,U		member r of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:118: assignment: +=
* Push right operand of add.
* Push right operand of mul.
	LDX	10,U		variable sph
	LEAX	25,X		member sclr of sphere_type
* optim: coalesceConsecutiveLeax
	PSHS	X
* Push left operand of mul.
* Push right operand of mul.
	LDX	6,U		variable light
	LEAX	20,X		member amount of light_type
* optim: coalesceConsecutiveLeax
	PSHS	X
* Push left operand of mul.
	LEAX	-275,U		variable `cos_theta', declared at light.c:115
	PSHS	X
	LEAX	-425,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-430,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LEAX	-400,U		member g of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:119: assignment: +=
* Push right operand of add.
* Push right operand of mul.
	LDX	10,U		variable sph
	LEAX	30,X		member sclr of sphere_type
* optim: coalesceConsecutiveLeax
	PSHS	X
* Push left operand of mul.
* Push right operand of mul.
	LDX	6,U		variable light
	LEAX	25,X		member amount of light_type
* optim: coalesceConsecutiveLeax
	PSHS	X
* Push left operand of mul.
	LEAX	-275,U		variable `cos_theta', declared at light.c:115
	PSHS	X
	LEAX	-415,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
	LEAX	-420,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LEAX	-395,U		member b of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
L00196	EQU	*		else clause of if() started at light.c:116
* Useless label L00197 removed
* Line light.c:125: init of variable tempr
* Line light.c:125: function call: vec_scale()
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
* Push right operand of mul.
* Line light.c:125: function call: vec_dot()
	LEAX	-330,U		variable `N', declared at light.c:101
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-290,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-60,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-60,U		address of struct/union returned by vec_dot()
	PSHS	X
* Push left operand of mul.
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A
	LEAX	-65,U		temporary destination, type float
	LBSR	mulIntSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-80,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-80,U		address of struct/union returned by vec_scale()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-270,U		destination struct: tempr
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:126: init of variable R
* Line light.c:126: function call: vec_diff()
	LEAX	-270,U		variable `tempr', declared at light.c:125
	PSHS	X		argument 2 of vec_diff(): struct vector_type *
	LEAY	-290,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-55,U		address of struct/union to be returned by vec_diff()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_diff
	LEAS	6,S
	LEAX	-55,U		address of struct/union returned by vec_diff()
	PSHS	X		source struct
	LDD	#15		size of struct vector_type
	LEAX	-255,U		destination struct: R
	LBSR	copyMem		initialize struct
	LEAS	2,S
* Line light.c:127: init of variable tmp2
* Line light.c:127: function call: vec_dot()
	LEAX	-255,U		variable `R', declared at light.c:126
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-255,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-40,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-40,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-240,U		address of variable to init: tmp2
	LBSR	initSingleFromSingle
* Line light.c:128: assignment: =
* Push right operand of div.
* Line light.c:128: function call: sqrtf()
	LEAX	-240,U		variable `tmp2', declared at light.c:127
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of sqrtf(): float
	LEAX	-30,U		address of struct/union to be returned by sqrtf()
	PSHS	X		hidden argument
	LBSR	_sqrtf
	LEAS	7,S
	LEAX	-30,U		address of struct/union returned by sqrtf()
	PSHS	X
* Push left operand of div.
	LEAX	F00188,PCR	real constant: 1 (float)
	PSHS	X
	LEAX	-35,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-240,U		variable `tmp2', declared at light.c:127
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line light.c:129: assignment: =
* Line light.c:129: function call: vec_scale()
	LEAX	-255,U		variable `R', declared at light.c:126
	PSHS	X		argument 2 of vec_scale(): struct vector_type *
	LEAX	-240,U		variable `tmp2', declared at light.c:127
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of vec_scale(): float
	LEAX	-25,U		address of struct/union to be returned by vec_scale()
	PSHS	X		hidden argument
	LBSR	_vec_scale
	LEAS	9,S
	LEAX	-25,U		address of struct/union returned by vec_scale()
	LDD	#15		size of struct vector_type
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-255,U		variable `R', declared at light.c:126
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line light.c:134: init of variable cos_alpha
* Line light.c:134: function call: vec_dot()
	LEAX	-385,U		variable `V', declared at light.c:88
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LEAY	-255,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-10,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-10,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-235,U		address of variable to init: cos_alpha
	LBSR	initSingleFromSingle
* Line light.c:135: init of variable n
* Push right operand of div.
	LEAX	-235,U		variable `cos_alpha', declared at light.c:134
	PSHS	X
* Push left operand of div.
	LEAX	F00198,PCR	real constant: 40 (float)
	PSHS	X
	LEAX	-5,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-230,U		address of variable to init: n
	LBSR	initSingleFromSingle
* Line light.c:136: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-235,U		variable `cos_alpha', declared at light.c:134
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	LBLE	L00200		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00201 removed
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-275,U		variable `cos_theta', declared at light.c:115
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	LBLE	L00200		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00199 removed
* Line light.c:136
* Line light.c:137: assignment: +=
* Push right operand of add.
* Line light.c:137: function call: expf()
* Push right operand of mul.
* Line light.c:137: function call: logf()
	LEAX	-235,U		variable `cos_alpha', declared at light.c:134
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of logf(): float
	LEAX	-445,U		address of struct/union to be returned by logf()
	PSHS	X		hidden argument
	LBSR	_logf
	LEAS	7,S
	LEAX	-445,U		address of struct/union returned by logf()
	PSHS	X
* Push left operand of mul.
	LEAX	-230,U		variable `n', declared at light.c:135
	PSHS	X
	LEAX	-450,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of expf(): float
	LEAX	-455,U		address of struct/union to be returned by expf()
	PSHS	X		hidden argument
	LBSR	_expf
	LEAS	7,S
	LEAX	-455,U		address of struct/union returned by expf()
	PSHS	X
* Push left operand of add.
	LEAX	-405,U		member r of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:138: assignment: +=
* Push right operand of add.
* Line light.c:138: function call: expf()
* Push right operand of mul.
* Line light.c:138: function call: logf()
	LEAX	-235,U		variable `cos_alpha', declared at light.c:134
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of logf(): float
	LEAX	-430,U		address of struct/union to be returned by logf()
	PSHS	X		hidden argument
	LBSR	_logf
	LEAS	7,S
	LEAX	-430,U		address of struct/union returned by logf()
	PSHS	X
* Push left operand of mul.
	LEAX	-230,U		variable `n', declared at light.c:135
	PSHS	X
	LEAX	-435,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of expf(): float
	LEAX	-440,U		address of struct/union to be returned by expf()
	PSHS	X		hidden argument
	LBSR	_expf
	LEAS	7,S
	LEAX	-440,U		address of struct/union returned by expf()
	PSHS	X
* Push left operand of add.
	LEAX	-400,U		member g of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
* Line light.c:139: assignment: +=
* Push right operand of add.
* Line light.c:139: function call: expf()
* Push right operand of mul.
* Line light.c:139: function call: logf()
	LEAX	-235,U		variable `cos_alpha', declared at light.c:134
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of logf(): float
	LEAX	-415,U		address of struct/union to be returned by logf()
	PSHS	X		hidden argument
	LBSR	_logf
	LEAS	7,S
	LEAX	-415,U		address of struct/union returned by logf()
	PSHS	X
* Push left operand of mul.
	LEAX	-230,U		variable `n', declared at light.c:135
	PSHS	X
	LEAX	-420,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	LEAS	-5,S		pass float by value
	LBSR	push5ByteStruct	argument 1 of expf(): float
	LEAX	-425,U		address of struct/union to be returned by expf()
	PSHS	X		hidden argument
	LBSR	_expf
	LEAS	7,S
	LEAX	-425,U		address of struct/union returned by expf()
	PSHS	X
* Push left operand of add.
	LEAX	-395,U		member b of color_type, via variable RGB
	PSHS	X
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
L00200	EQU	*		else clause of if() started at light.c:136
* Useless label L00202 removed
* Line light.c:146: return struct/union by value
	LEAX	-405,U		variable `RGB', declared at light.c:76
	PSHS	X		source struct/union
	LDX	4,U		address of return value
	LDD	#15		size of struct color_type
	LBSR	copyMem
	LEAS	2,S		discard copyMem argument
* optim: branchToNextLocation
* Useless label L00131 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION do_lighting(): defined at light.c:73
funcend_do_lighting	EQU *
funcsize_do_lighting	EQU	funcend_do_lighting-_do_lighting


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*
real_constants_start	EQU	*


*******************************************************************************

* REAL CONSTANTS
F00187	EQU	*
	FCB	$7D,$4C,$CC,$CC,$CC
F00188	EQU	*
	FCB	$81,$00,$00,$00,$00
F00189	EQU	*
	FCB	$78,$03,$12,$6E,$97
F00190	EQU	*
	FCB	$7B,$23,$D7,$0A,$3D
F00191	EQU	*
	FCB	$7E,$4C,$CC,$CC,$CC
F00198	EQU	*
	FCB	$86,$20,$00,$00,$00
real_constants_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 19 utility routine(s).
_expf	IMPORT
_logf	IMPORT
_memcpy	IMPORT
_sqrtf	IMPORT
_vec_diff	IMPORT
_vec_dot	IMPORT
_vec_len	IMPORT
_vec_scale	IMPORT
_vec_sum	IMPORT
addSingleSingle	IMPORT
cmpSingleSignedInt	IMPORT
cmpSingleSingle	IMPORT
copyMem	IMPORT
divSingleSingle	IMPORT
initSingleFromSignedWord	IMPORT
initSingleFromSingle	IMPORT
mulIntSingle	IMPORT
mulSingleSingle	IMPORT
push5ByteStruct	IMPORT


*******************************************************************************

	END
