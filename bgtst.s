* 6809 assembly program generated by cmoc 0.1.85


	SECTION	start


program_start	EXPORT
_main	IMPORT
INILIB	IMPORT
_exit	IMPORT
program_start	EQU	*
	LDD	#-1024		stack space in bytes
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention


	ENDSECTION




	SECTION	code


_isCoCo3	IMPORT
_textScreenWidth	IMPORT
_textScreenHeight	IMPORT
_ucbLogoPaletteValues	EXPORT
_graphicsDriver	EXPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atanf	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_attr	IMPORT
_bsearch	IMPORT
_cls	IMPORT
_cmp	IMPORT
_cmpdww	IMPORT
_coldStart	IMPORT
_cosf	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_expf	IMPORT
_fabsf	IMPORT
_floorf	IMPORT
_ftoa	IMPORT
_getTextMode	IMPORT
_hscreen	IMPORT
_hset	IMPORT
_initCoCoSupport	IMPORT
_inkey	IMPORT
_isKeyPressed	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_locate	IMPORT
_logf	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_palette	IMPORT
_paletteRGB	IMPORT
_pcls	IMPORT
_pmode	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readDECBFile	IMPORT
_readJoystickButtons	IMPORT
_readJoystickPositions	IMPORT
_readline	IMPORT
_readword	IMPORT
_resetPalette	IMPORT
_rgb	IMPORT
_roundf	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_screen	IMPORT
_setBorderColor	IMPORT
_setCaseFlag	IMPORT
_setConsoleOutHook	IMPORT
_setHighSpeed	IMPORT
_setOutputDevice	IMPORT
_setPmodeGraphicsAddressEx	IMPORT
_setSAMRegisters	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_showGraphicsAddress	IMPORT
_showLowResTextAddress	IMPORT
_showPmode4	IMPORT
_sinf	IMPORT
_sleep	IMPORT
_sound	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_sqrtf	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tanf	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_truncf	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_waitkey	IMPORT
_width	IMPORT
_zerodw	IMPORT
_mainDrawingFunction	EXPORT


*******************************************************************************

* FUNCTION mainDrawingFunction(): defined at bgtst.c:59
_mainDrawingFunction	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-4,S
* Local non-static variable(s):
*     -4,U:    2 bytes: i: int
*     -2,U:    1 byte : bgColor: unsigned char
*     -1,U:    1 byte : count: unsigned char
* Line bgtst.c:61: assignment: =
	LDB	#$00
	STB	$FFD9
* Line bgtst.c:62: init of variable bgColor
	LDB	#$0D		13
	STB	-2,U		variable bgColor
* Line bgtst.c:63: function call through pointer
* optim: storeLoad
	CLRA			promoting byte argument to word
	PSHS	B,A		argument 1: unsigned char
	LDX	_graphicsDriver+0,PCR	variable graphicsDriver
	LDX	2,X		optim: removeTfrDX
* optim: removeTfrDX
	JSR	,X
	LEAS	2,S
* Line bgtst.c:65: inline assembly
* Inline assembly:

 sync 

* End of inline assembly.
* Line bgtst.c:66: function call: memcpy()
	CLRA
	LDB	#$10		decimal 16 signed
	PSHS	B,A		argument 3 of memcpy(): int
	LEAX	_ucbLogoPaletteValues+0,PCR	address of array ucbLogoPaletteValues
	PSHS	X		argument 2 of memcpy(): const unsigned char[]
	LDD	#$FFB0		decimal 65456 unsigned
* Emitted no code to cast `unsigned int' to `void *'
	PSHS	B,A		argument 1 of memcpy(): void *
	LBSR	_memcpy
	LEAS	6,S
* Line bgtst.c:68: function call through pointer
	LDX	_graphicsDriver+0,PCR	variable graphicsDriver
	LDX	4,X		optim: removeTfrDX
* optim: removeTfrDX
	JSR	,X
* Line bgtst.c:70: init of variable count
	CLR	-1,U		variable count
* Line bgtst.c:71: for init
* Line bgtst.c:71: init of variable i
	CLRA
	CLRB
	STD	-4,U		variable i
	BRA	L00127		jump to for condition
L00126	EQU	*
* Line bgtst.c:71: for body
* Line bgtst.c:72: function call through pointer
	LDY	-4,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LDX	#$10		optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$10		decimal 16 signed
	PSHS	Y,X,B,A		optim: optimizePshsOps
	LDX	-4,U		left
* optim: removeClr
	LDB	#$10		right
	LBSR	MUL16
	ADDD	,S++
	PSHS	B,A		argument 3: int
	CLRA
	CLRB
	PSHS	B,A		argument 2: int
	LDX	-4,U		left
	LDB	#$10		optim: changeLoadDToLoadB
	LBSR	MUL16
	PSHS	B,A		argument 1: int
	LDX	_graphicsDriver+0,PCR	variable graphicsDriver
	LDX	10,X		optim: removeTfrDX
* optim: removeTfrDX
	JSR	,X
	LEAS	10,S
* Useless label L00128 removed
* Line bgtst.c:71: for increment(s)
	LDD	-4,U
	ADDD	#1
	STD	-4,U
L00127	EQU	*
* Line bgtst.c:71: for condition
	LDD	-4,U		variable i
	CMPD	#$10
	BLT	L00126
* optim: branchToNextLocation
* Useless label L00129 removed
L00130	EQU	*
* Line bgtst.c:78: for body
* Useless label L00132 removed
	BRA	L00130
* Useless label L00133 removed
* Useless label L00120 removed
* optim: instrFollowingUncondBranch
* optim: instrFollowingUncondBranch
* END FUNCTION mainDrawingFunction(): defined at bgtst.c:59
funcend_mainDrawingFunction	EQU *
funcsize_mainDrawingFunction	EQU	funcend_mainDrawingFunction-_mainDrawingFunction
_runGraphicsDriver	EXPORT


*******************************************************************************

* FUNCTION runGraphicsDriver(): defined at bgtst.c:89
_runGraphicsDriver	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-2,S
* Local non-static variable(s):
*     -2,U:    2 bytes: size: unsigned int
* Line bgtst.c:97: if
* Line bgtst.c:97: function call: readDECBFile()
	LEAX	-2,U		variable `size', declared at bgtst.c:96
* optim: optimizePshsOps
	LDD	#$0600		decimal 1536 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LEAX	S00123,PCR	"CC3GRAPHDRV"
	PSHS	X		argument 3 of readDECBFile(): const char[]
	CLRA
* optim: removeClr
	PSHS	B,A		argument 2 of readDECBFile(): int
	LDD	#$C000		decimal 49152 unsigned
	PSHS	B,A		argument 1 of readDECBFile(): unsigned int
	LBSR	_readDECBFile
	LEAS	10,S
	TSTB
	BNE	L00121		 (optim: condBranchOverUncondBranch) (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00134 removed
* Line bgtst.c:98
* optim: condBranchOverUncondBranch
* Useless label L00135 removed
* Useless label L00136 removed
* Line bgtst.c:105: assignment: =
* Line bgtst.c:105: function call through pointer
	JSR	$C000
	STD	_graphicsDriver+0,PCR
* Line bgtst.c:107: function call through pointer
	LEAX	_mainDrawingFunction,PCR	address of mainDrawingFunction(), defined at bgtst.c:59
	PSHS	X		optim: optimizeTfrPush
* optim: optimizeTfrPush
* optim: optimizeLdx
	LDX	[_graphicsDriver+0,PCR]	optim: optimizeLdx
* optim: removeTfrDX
	JSR	,X
	LEAS	2,S
L00121	EQU	*		end of runGraphicsDriver()
	LEAS	,U
	PULS	U,PC
* END FUNCTION runGraphicsDriver(): defined at bgtst.c:89
funcend_runGraphicsDriver	EQU *
funcsize_runGraphicsDriver	EQU	funcend_runGraphicsDriver-_runGraphicsDriver
_main	EXPORT


*******************************************************************************

* FUNCTION main(): defined at bgtst.c:112
_main	EQU	*
* Calling convention: Default
* Line bgtst.c:114: function call: initCoCoSupport()
	LBSR	_initCoCoSupport
* Line bgtst.c:115: if
	LDB	_isCoCo3+0,PCR	variable `isCoCo3', declared at /usr/local/share/cmoc/include/coco.h:43
* optim: loadCmpZeroBeqOrBne
	BNE	L00138
* optim: branchToNextLocation
* Useless label L00137 removed
* Line bgtst.c:116
* Line bgtst.c:117: function call: printf()
	LEAX	S00124,PCR	"COCO 3 REQUIRED.\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line bgtst.c:118: return with value
	CLRA
	CLRB
	BRA	L00122		return (bgtst.c:118)
L00138	EQU	*		else clause of if() started at bgtst.c:115
* Useless label L00139 removed
* Line bgtst.c:121: function call: rgb()
	LBSR	_rgb
* Line bgtst.c:122: function call: cls()
	CLRA
	LDB	#$FF		decimal 255 signed
	PSHS	B,A		argument 1 of cls(): int
	LBSR	_cls
	LEAS	2,S
* Line bgtst.c:124: function call: locate()
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B,A		argument 2 of locate(): int
* optim: stripExtraClrA_B
	LDB	#$06		decimal 6 signed
	PSHS	B,A		argument 1 of locate(): int
	LBSR	_locate
	LEAS	4,S
* Line bgtst.c:136: function call: printf()
	LEAX	S00125,PCR	"\xBF \xBF \xBF WARNING \xBF \xBF \xBF\n\n\n   THE UGLINESS OF THE SCREEN\n   THAT FOLLOWS IS DUE TO THE\n   AUTHOR OF THE DEMO, NOT TO\n   THE BGRAPH LIBRARY.\n\n\n\n   LOADING DRIVER...\n   (TAKES ABOUT 7 SECONDS...)\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line bgtst.c:138: function call: runGraphicsDriver()
	LBSR	_runGraphicsDriver
L00140	EQU	*
* Line bgtst.c:139: for body
* Useless label L00142 removed
	BRA	L00140
* Useless label L00143 removed
* Line bgtst.c:140: return with value
* optim: instrFollowingUncondBranch
* optim: instrFollowingUncondBranch
* optim: instrFollowingUncondBranch
L00122	EQU	*		end of main()
	RTS
* END FUNCTION main(): defined at bgtst.c:112
funcend_main	EQU *
funcsize_main	EQU	funcend_main-_main


	ENDSECTION




	SECTION	initgl_start


INITGL	EXPORT
INITGL	EQU	*


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00123	EQU	*
	FCC	"CC3GRAPHDRV"
	FCB	0
S00124	EQU	*
	FCC	"COCO 3 REQUIRED."
	FCB	$0A
	FCB	0
S00125	EQU	*
	FCB	$BF
	FCC	" "
	FCB	$BF
	FCC	" "
	FCB	$BF
	FCC	" WARNING "
	FCB	$BF
	FCC	" "
	FCB	$BF
	FCC	" "
	FCB	$BF
	FCB	$0A
	FCB	$0A
	FCB	$0A
	FCC	"   THE UGLINESS OF THE SCREEN"
	FCB	$0A
	FCC	"   THAT FOLLOWS IS DUE TO THE"
	FCB	$0A
	FCC	"   AUTHOR OF THE DEMO, NOT TO"
	FCB	$0A
	FCC	"   THE BGRAPH LIBRARY."
	FCB	$0A
	FCB	$0A
	FCB	$0A
	FCB	$0A
	FCC	"   LOADING DRIVER..."
	FCB	$0A
	FCC	"   (TAKES ABOUT 7 SECONDS...)"
	FCB	$0A
	FCB	0
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES
_ucbLogoPaletteValues	EQU	*		ucbLogoPaletteValues: const unsigned char[]
* Element 0 of array, of type const unsigned char
	FCB	$00		decimal 0
* Element 1 of array, of type const unsigned char
	FCB	$04		decimal 4
* Element 2 of array, of type const unsigned char
	FCB	$0E		decimal 14
* Element 3 of array, of type const unsigned char
	FCB	$07		decimal 7
* Element 4 of array, of type const unsigned char
	FCB	$22		decimal 34
* Element 5 of array, of type const unsigned char
	FCB	$14		decimal 20
* Element 6 of array, of type const unsigned char
	FCB	$26		decimal 38
* Element 7 of array, of type const unsigned char
	FCB	$38		decimal 56
* Element 8 of array, of type const unsigned char
	FCB	$19		decimal 25
* Element 9 of array, of type const unsigned char
	FCB	$35		decimal 53
* Element 10 of array, of type const unsigned char
	FCB	$1C		decimal 28
* Element 11 of array, of type const unsigned char
	FCB	$17		decimal 23
* Element 12 of array, of type const unsigned char
	FCB	$34		decimal 52
* Element 13 of array, of type const unsigned char
	FCB	$1B		decimal 27
* Element 14 of array, of type const unsigned char
	FCB	$30		decimal 48
* Element 15 of array, of type const unsigned char
	FCB	$3F		decimal 63


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
_graphicsDriver	EQU	*
	RMB	2		graphicsDriver
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




	SECTION	initgl_end


	RTS			end of global variable initialization


	ENDSECTION




*******************************************************************************



	SECTION	program_end


program_end	EXPORT
program_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 8 utility routine(s).
MUL16	IMPORT
_cls	IMPORT
_initCoCoSupport	IMPORT
_locate	IMPORT
_memcpy	IMPORT
_printf	IMPORT
_readDECBFile	IMPORT
_rgb	IMPORT


*******************************************************************************

	END
