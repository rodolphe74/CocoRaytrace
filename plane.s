* 6809 assembly program generated by cmoc 0.1.85


	SECTION	code


_isCoCo3	IMPORT
_textScreenWidth	IMPORT
_textScreenHeight	IMPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atanf	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_attr	IMPORT
_bsearch	IMPORT
_cls	IMPORT
_cmp	IMPORT
_cmpdww	IMPORT
_coldStart	IMPORT
_cosf	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_expf	IMPORT
_fabsf	IMPORT
_floorf	IMPORT
_ftoa	IMPORT
_getTextMode	IMPORT
_hscreen	IMPORT
_hset	IMPORT
_initCoCoSupport	IMPORT
_inkey	IMPORT
_isKeyPressed	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_locate	IMPORT
_logf	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_palette	IMPORT
_paletteRGB	IMPORT
_pcls	IMPORT
_pmode	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_ray	IMPORT
_readDECBFile	IMPORT
_readJoystickButtons	IMPORT
_readJoystickPositions	IMPORT
_readline	IMPORT
_readword	IMPORT
_resetPalette	IMPORT
_rgb	IMPORT
_roundf	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_screen	IMPORT
_setBorderColor	IMPORT
_setCaseFlag	IMPORT
_setConsoleOutHook	IMPORT
_setHighSpeed	IMPORT
_setOutputDevice	IMPORT
_setPmodeGraphicsAddressEx	IMPORT
_setSAMRegisters	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_showGraphicsAddress	IMPORT
_showLowResTextAddress	IMPORT
_showPmode4	IMPORT
_sinf	IMPORT
_sleep	IMPORT
_sound	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_sqrtf	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tanf	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_truncf	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vec_diff	IMPORT
_vec_dot	IMPORT
_vec_len	IMPORT
_vec_scale	IMPORT
_vec_sum	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_waitkey	IMPORT
_width	IMPORT
_zerodw	IMPORT
_plane_intersect	EXPORT


*******************************************************************************

* FUNCTION plane_intersect(): defined at plane.c:16
_plane_intersect	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-87,S
* Formal parameter(s):
*      6,U:    2 bytes: ray: struct ray_type *
*      8,U:    2 bytes: pln: struct plane_type *
* Local non-static variable(s):
*    -87,U:    5 bytes: $V00132: float
*    -82,U:    5 bytes: $V00133: float
*    -77,U:    5 bytes: $V00134: float
*    -72,U:    5 bytes: $V00135: float
*    -67,U:    5 bytes: $V00136: float
*    -62,U:    5 bytes: $V00137: float
*    -57,U:   22 bytes: ix_point: struct intersect
*    -35,U:    5 bytes: pdnom: float
*    -30,U:    5 bytes: pnumr: float
*    -25,U:    5 bytes: planeT: float
*    -20,U:    5 bytes: $V00128: float
*    -15,U:    5 bytes: $V00129: float
*    -10,U:    5 bytes: $V00130: float
*     -5,U:    5 bytes: $V00131: float
* Line plane.c:18: init of variable pdnom
* Line plane.c:18: function call: vec_dot()
	LDX	6,U		variable ray
	LEAX	15,X		member dir of ray_type
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LDY	8,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-20,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-20,U		address of struct/union returned by vec_dot()
	TFR	X,D		address of source number in D
	LEAX	-35,U		address of variable to init: pdnom
	LBSR	initSingleFromSingle
* Line plane.c:20: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-35,U		variable `pdnom', declared at plane.c:18
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	BGT	L00139		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00138 removed
* Line plane.c:20
* Line plane.c:21: assignment: =
	CLRA
	CLRB
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-37,U		optim: optimizeLeax
L00139	EQU	*		else clause of if() started at plane.c:20
* Useless label L00140 removed
* Line plane.c:24: init of variable pnumr
* Push right operand of sub.
* Line plane.c:24: function call: vec_dot()
	LDX	6,U		variable ray
	PSHS	X		argument 2 of vec_dot(): struct vector_type *
	LDY	8,U		optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-10,U		address of struct/union to be returned by vec_dot()
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_vec_dot
	LEAS	6,S
	LEAX	-10,U		address of struct/union returned by vec_dot()
	PSHS	X
* Push left operand of sub.
	LDX	8,U		variable pln
	LEAX	15,X		member D of plane_type
	PSHS	X
	LEAX	-15,U		temporary destination, type float
	LBSR	subSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-30,U		address of variable to init: pnumr
	LBSR	initSingleFromSingle
* Line plane.c:25: init of variable planeT
* Push right operand of div.
	LEAX	-35,U		variable `pdnom', declared at plane.c:18
	PSHS	X
* Push left operand of div.
	LEAX	-30,U		variable `pnumr', declared at plane.c:24
	PSHS	X
	LEAX	-5,U		temporary destination, type float
	LBSR	divSingleSingle	preserves X
	LEAS	4,S
	TFR	X,D		address of source number in D
	LEAX	-25,U		address of variable to init: planeT
	LBSR	initSingleFromSingle
* Line plane.c:27: if
* push right operand of comparison
	CLRA
	CLRB
	PSHS	B,A
* push left operand of comparison
	LEAX	-25,U		variable `planeT', declared at plane.c:25
	PSHS	X
	LBSR	cmpSingleSignedInt	sets N, Z, V, C; preserves X
	LEAS	4,S
	LBLE	L00142		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00141 removed
* Line plane.c:27
* Line plane.c:28: assignment: =
* Push right operand of add.
* Push right operand of mul.
	LEAX	-25,U		variable `planeT', declared at plane.c:25
	PSHS	X
* Push left operand of mul.
	LDX	6,U		variable ray
	LEAX	15,X		member dir of ray_type
	PSHS	X
	LEAX	-82,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LDX	6,U		variable ray
	PSHS	X
	LEAX	-87,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-57,U		member p of intersect, via variable ix_point
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line plane.c:29: assignment: =
* Push right operand of add.
* Push right operand of mul.
	LEAX	-25,U		variable `planeT', declared at plane.c:25
	PSHS	X
* Push left operand of mul.
	LDX	6,U		variable ray
	LEAX	20,X		member dir of ray_type
* optim: coalesceConsecutiveLeax
	PSHS	X
	LEAX	-72,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LDX	6,U		variable ray
	LEAX	5,X		member y of vector_type
	PSHS	X
	LEAX	-77,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	65484,U		member p of intersect, via variable ix_point
* optim: coalesceConsecutiveLeax
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line plane.c:30: assignment: =
* Push right operand of add.
* Push right operand of mul.
	LEAX	-25,U		variable `planeT', declared at plane.c:25
	PSHS	X
* Push left operand of mul.
	LDX	6,U		variable ray
	LEAX	25,X		member dir of ray_type
* optim: coalesceConsecutiveLeax
	PSHS	X
	LEAX	-62,U		temporary destination, type float
	LBSR	mulSingleSingle	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	LDX	6,U		variable ray
	LEAX	10,X		member z of vector_type
	PSHS	X
	LEAX	-67,U		temporary destination, type float
	LBSR	addSingleSingle	preserves X
	LEAS	4,S
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	65489,U		member p of intersect, via variable ix_point
* optim: coalesceConsecutiveLeax
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line plane.c:31: assignment: =
	LEAX	-25,U		variable `planeT', declared at plane.c:25
	LDD	#5		size of struct _Float
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LEAX	-42,U		member plnT of intersect, via variable ix_point
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Line plane.c:32: assignment: =
	CLRA
	LDB	#$01		decimal 1 signed
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-37,U		optim: optimizeLeax
L00142	EQU	*		else clause of if() started at plane.c:27
* Useless label L00143 removed
* Line plane.c:35: return struct/union by value
	LEAX	-57,U		variable `ix_point', declared at plane.c:17
	PSHS	X		source struct/union
	LDX	4,U		address of return value
	LDD	#22		size of struct intersect
	LBSR	copyMem
	LEAS	2,S		discard copyMem argument
* optim: branchToNextLocation
* Useless label L00127 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION plane_intersect(): defined at plane.c:16
funcend_plane_intersect	EQU *
funcsize_plane_intersect	EQU	funcend_plane_intersect-_plane_intersect


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 9 utility routine(s).
_memcpy	IMPORT
_vec_dot	IMPORT
addSingleSingle	IMPORT
cmpSingleSignedInt	IMPORT
copyMem	IMPORT
divSingleSingle	IMPORT
initSingleFromSingle	IMPORT
mulSingleSingle	IMPORT
subSingleSingle	IMPORT


*******************************************************************************

	END
